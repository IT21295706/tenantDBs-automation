name: Liquibase Migration

on:
  push:
    branches:
      - main  # Change this if needed
    paths:
      - '/opt/liquibase'  # Trigger when changelog.xml is updated
  workflow_dispatch:  

jobs:
  liquibase-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4


      - name: Set Up Liquibase
        run: |
          wget https://github.com/liquibase/liquibase/releases/download/v4.25.0/liquibase-4.25.0.zip
          unzip liquibase-4.25.0.zip -d /opt/liquibase
          chmod +x /opt/liquibase/liquibase

          
      - name: Test DB Connection
        run: |
          nc -zv 13.212.238.210 3306

          
      - name: Copy Liquibase Configuration Files
        run: |
          mkdir -p /opt/liquibase  
          cp $GITHUB_WORKSPACE/opt/liquibase/liquibase.properties /opt/liquibase/liquibase.properties
          cp $GITHUB_WORKSPACE/opt/liquibase/changelog.xml /opt/liquibase/changelog.xml
          ls -l /opt/liquibase  

          
      - name: Debug Liquibase Properties
        run: |
          ls -l /opt/liquibase/
          cat /opt/liquibase/liquibase.properties || echo "‚ö†Ô∏è liquibase.properties NOT FOUND!"


      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem


      - name: Take Database Backups Inside AWS Server
        run: |
          echo "üõ†Ô∏è Creating backups for all tenant databases before applying changes..."
          ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ec2-user@13.212.238.210 << EOF
            for i in {100..104}; do
              echo "Backing up tenant$i..."
              mysqldump -u root -p"${{ secrets.MYSQL_PASSWORD }}" tenant$i > /home/ec2-user/tenant${i}_DUMP.sql
            done
          EOF
          echo "‚úÖ All backups created successfully!"
   


      - name: Tag Database Before Update
        run: |
          for i in {100..104}; do
            DB_NAME="tenant$i"
            echo "Tagging database: $DB_NAME"
        
            /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties  --url="jdbc:mariadb://13.212.238.210:3306/$DB_NAME" tag "before_update"
          done

      - name: Run Liquibase Update for All Tenants
        id: liquibase_update
        run: |

         set +e  # Allow script to continue even if an error occurs
         EXIT_CODE=0  # Initialize variable to track failures
         
          for i in {100..104}; do
            DB_NAME="tenant$i"
            echo "Running Liquibase for $DB_NAME..."
            
            /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties  --url="jdbc:mariadb://13.212.238.210:3306/$DB_NAME"  update --changelog-file=liquibase/changelog.xml --log-level=debug
           
             CODE=$?  # Capture exit code for this iteration
            if [ $CODE -ne 0 ]; then
                EXIT_CODE=$CODE  # Store failure code
            fi
          done
            
            echo "LIQUIBASE_EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV  # Save exit code globally
            set -e  # Enable failing for later steps
          


      - name: Run Liquibase Rollback if Update Fails
        if: env.LIQUIBASE_EXIT_CODE != '0'  # Run only if Liquibase failed
        run: |
          echo "‚ö†Ô∏è Update failed! Rolling back changes..."
           for i in {100..104}; do
            DB_NAME="tenant$i"
            echo "Rolling back $DB_NAME..."
            
          /opt/liquibase/liquibase --searchPath=/opt --defaults-file=/opt/liquibase/liquibase.properties --url="jdbc:mariadb://13.212.238.210:3306/$DB_NAME" rollback --tag before_update --changelog-file=liquibase/changelog.xml --log-level=debug   
         
          done
          echo "‚úÖ Rollback completed!"
            

      - name: Print Success Message
        if: env.LIQUIBASE_EXIT_CODE == '0'  # Run only if Liquibase succeeded
        run: echo "‚úÖ Liquibase migration applied successfully!"

        
